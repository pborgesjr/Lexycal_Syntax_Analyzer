
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 30 05:03:29 BRT 2017
//----------------------------------------------------

package analisador_lexico;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import analisador_lexico.Yylex;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 30 05:03:29 BRT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\004\005\000\002\004" +
    "\007\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\012\000\002\010" +
    "\011\000\002\010\007\000\002\012\006\000\002\012\005" +
    "\000\002\012\005\000\002\012\006\000\002\020\004\000" +
    "\002\013\007\000\002\013\005\000\002\013\006\000\002" +
    "\014\006\000\002\014\006\000\002\014\010\000\002\015" +
    "\004\000\002\022\003\000\002\022\003\000\002\021\007" +
    "\000\002\021\005\000\002\021\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\004\000\002\023\005\000\002" +
    "\016\011\000\002\016\011\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\042\004\004\011\017\012\007\013\023\014" +
    "\044\015\020\016\026\020\035\021\013\023\033\024\034" +
    "\026\005\027\030\030\045\032\032\033\027\001\002\000" +
    "\052\002\uffed\004\uffed\007\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\026\uffed\027\uffed\030\uffed\032\uffed" +
    "\033\uffed\001\002\000\004\016\173\001\002\000\044\002" +
    "\ufffd\004\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\020\ufffd\021\ufffd\023\ufffd\024\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\032\ufffd\033\ufffd\001\002\000\004\020\172" +
    "\001\002\000\046\002\ufffb\004\ufffb\007\072\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb\021\ufffb" +
    "\023\ufffb\024\ufffb\026\ufffb\027\ufffb\030\ufffb\032\ufffb\033" +
    "\ufffb\001\002\000\004\033\171\001\002\000\044\002\uffe8" +
    "\004\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\032\uffe8\033\uffe8\001\002\000\052\002\uffe9\004" +
    "\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\032\uffe9\033\uffe9\001\002" +
    "\000\044\002\ufff4\004\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4\023\ufff4\024\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\032\ufff4\033\ufff4\001\002\000" +
    "\046\002\uffd6\004\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\032\uffd6\033\uffd6\001\002" +
    "\000\044\002\ufff7\004\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\032\ufff7\033\ufff7\001\002\000" +
    "\004\016\156\001\002\000\052\002\uffef\004\uffef\005\112" +
    "\007\uffef\010\155\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\020\uffef\021\uffef\023\uffef\024\uffef\026\uffef" +
    "\027\uffef\030\uffef\032\uffef\033\uffef\001\002\000\044\002" +
    "\ufffc\004\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\020\ufffc\021\ufffc\023\ufffc\024\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\032\ufffc\033\ufffc\001\002\000\044\002\ufff6" +
    "\004\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\020\ufff6\021\ufff6\023\ufff6\024\ufff6\026\ufff6\027\ufff6" +
    "\030\ufff6\032\ufff6\033\ufff6\001\002\000\052\002\uffeb\004" +
    "\uffeb\007\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb\033\uffeb\001\002" +
    "\000\044\002\ufffa\004\ufffa\011\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\020\ufffa\021\ufffa\023\ufffa\024\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\032\ufffa\033\ufffa\001\002\000" +
    "\044\002\uffff\004\004\011\017\012\007\013\023\014\044" +
    "\015\020\016\026\020\035\021\013\023\033\024\034\026" +
    "\005\027\030\030\045\032\032\033\027\001\002\000\026" +
    "\004\004\013\023\015\153\016\117\020\035\021\013\023" +
    "\033\024\034\032\152\033\027\001\002\000\050\002\ufff0" +
    "\004\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\032\ufff0\033\ufff0\001\002\000" +
    "\004\015\145\001\002\000\004\025\136\001\002\000\052" +
    "\002\ufff1\004\ufff1\005\130\006\134\007\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1" +
    "\023\ufff1\024\ufff1\026\ufff1\027\ufff1\030\ufff1\032\ufff1\033" +
    "\ufff1\001\002\000\052\002\uffea\004\uffea\007\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\026\uffea\027\uffea" +
    "\030\uffea\032\uffea\033\uffea\001\002\000\052\002\uffee\004" +
    "\uffee\007\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024" +
    "\uffee\026\uffee\027\uffee\030\uffee\032\uffee\033\uffee\001\002" +
    "\000\052\002\uffec\004\uffec\007\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\026\uffec\027\uffec\030\uffec\032" +
    "\uffec\033\uffec\001\002\000\044\002\ufff8\004\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\020\ufff8\021" +
    "\ufff8\023\ufff8\024\ufff8\026\ufff8\027\ufff8\030\ufff8\032\ufff8" +
    "\033\ufff8\001\002\000\004\002\133\001\002\000\044\002" +
    "\ufff5\004\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\020\ufff5\021\ufff5\023\ufff5\024\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\032\ufff5\033\ufff5\001\002\000\044\002\uffe7" +
    "\004\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\020\uffe7\021\uffe7\023\uffe7\024\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\032\uffe7\033\uffe7\001\002\000\046\002\uffd7\004" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\032\uffd7\033\uffd7\001\002\000\044\002\ufff9" +
    "\004\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\020\ufff9\021\ufff9\023\ufff9\024\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\032\ufff9\033\ufff9\001\002\000\004\016\047\001" +
    "\002\000\004\031\046\001\002\000\004\002\ufffe\001\002" +
    "\000\006\015\050\027\030\001\002\000\004\010\101\001" +
    "\002\000\026\004\004\013\023\015\057\016\056\020\035" +
    "\021\013\023\033\024\034\032\055\033\060\001\002\000" +
    "\026\004\004\013\023\015\057\016\056\020\035\021\013" +
    "\023\033\024\034\032\055\033\060\001\002\000\004\007" +
    "\072\001\002\000\004\015\065\001\002\000\052\002\ufff1" +
    "\004\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\026\ufff1\027\ufff1\030\ufff1\032\ufff1\033\ufff1\001" +
    "\002\000\024\004\004\013\023\015\057\020\035\021\013" +
    "\023\033\024\034\032\055\033\060\001\002\000\052\002" +
    "\uffef\004\uffef\007\uffef\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\026\uffef\027\uffef\030\uffef\032\uffef\033\uffef" +
    "\001\002\000\052\002\ufff0\004\ufff0\007\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\032\ufff0\033\ufff0\001\002\000\004\007\062\001\002" +
    "\000\024\004\004\013\023\015\057\020\035\021\013\023" +
    "\033\024\034\032\055\033\060\001\002\000\004\017\064" +
    "\001\002\000\046\002\uffde\004\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\023\uffde\024\uffde\026\uffde\027\uffde\030\uffde\032\uffde\033" +
    "\uffde\001\002\000\004\010\071\001\002\000\004\017\067" +
    "\001\002\000\004\020\070\001\002\000\044\002\uffce\004" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\020\uffce\021\uffce\023\uffce\024\uffce\026\uffce\027\uffce\030" +
    "\uffce\032\uffce\033\uffce\001\002\000\004\017\uffdf\001\002" +
    "\000\024\004\004\013\023\015\057\020\035\021\013\023" +
    "\033\024\034\032\055\033\060\001\002\000\050\002\uffdd" +
    "\004\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\074\023\uffdd\024\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\032\uffdd\033\uffdd\001\002\000" +
    "\046\002\uffdc\004\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\023\uffdc\024" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\032\uffdc\033\uffdc\001\002" +
    "\000\004\015\065\001\002\000\004\017\077\001\002\000" +
    "\004\020\100\001\002\000\044\002\uffcd\004\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd\021" +
    "\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\032\uffcd" +
    "\033\uffcd\001\002\000\030\004\004\013\023\015\105\016" +
    "\104\020\035\021\013\022\106\023\033\024\034\032\103" +
    "\033\027\001\002\000\046\002\uffe2\004\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2" +
    "\022\132\023\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2\032" +
    "\uffe2\033\uffe2\001\002\000\050\002\ufff1\004\ufff1\005\130" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\032\ufff1\033\ufff1\001\002\000\012\015\116\016" +
    "\117\032\115\033\121\001\002\000\050\002\uffef\004\uffef" +
    "\005\112\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\026\uffef" +
    "\027\uffef\030\uffef\032\uffef\033\uffef\001\002\000\044\002" +
    "\uffe1\004\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\032\uffe1\033\uffe1\001\002\000\004\022\110" +
    "\001\002\000\044\002\uffe0\004\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\021\uffe0\023\uffe0" +
    "\024\uffe0\026\uffe0\027\uffe0\030\uffe0\032\uffe0\033\uffe0\001" +
    "\002\000\004\033\114\001\002\000\004\032\113\001\002" +
    "\000\050\002\uffd3\004\uffd3\007\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3\032\uffd3\033" +
    "\uffd3\001\002\000\050\002\uffcf\004\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\032\uffcf\033\uffcf\001\002\000\004\005\125\001\002\000" +
    "\002\001\002\000\010\015\116\016\117\033\121\001\002" +
    "\000\004\017\124\001\002\000\002\001\002\000\004\033" +
    "\123\001\002\000\050\002\uffd1\004\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\032\uffd1\033\uffd1\001\002\000\050\002\uffd2\004\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\032\uffd2\033\uffd2\001\002\000\004\032\126" +
    "\001\002\000\004\017\127\001\002\000\050\002\uffd5\004" +
    "\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\032\uffd5\033\uffd5\001\002\000\004" +
    "\032\131\001\002\000\050\002\uffd4\004\uffd4\007\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\032\uffd4\033\uffd4\001\002\000\044\002\uffe3\004\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020" +
    "\uffe3\021\uffe3\023\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\032\uffe3\033\uffe3\001\002\000\004\002\001\001\002\000" +
    "\004\032\135\001\002\000\046\002\uffcc\004\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\032\uffcc\033\uffcc\001\002\000\004\016\137\001\002\000" +
    "\004\013\140\001\002\000\024\004\004\013\023\015\057" +
    "\020\035\021\013\023\033\024\034\032\055\033\060\001" +
    "\002\000\004\013\142\001\002\000\004\017\143\001\002" +
    "\000\004\022\144\001\002\000\044\002\uffe6\004\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6" +
    "\021\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6\030\uffe6\032" +
    "\uffe6\033\uffe6\001\002\000\006\010\146\022\147\001\002" +
    "\000\024\004\004\013\023\015\057\020\035\021\013\023" +
    "\033\024\034\032\055\033\060\001\002\000\044\002\ufff3" +
    "\004\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\020\ufff3\021\ufff3\023\ufff3\024\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\032\ufff3\033\ufff3\001\002\000\004\022\151\001" +
    "\002\000\044\002\ufff2\004\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2\023\ufff2\024" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\032\ufff2\033\ufff2\001\002" +
    "\000\006\005\125\007\ufff1\001\002\000\004\007\uffef\001" +
    "\002\000\004\002\000\001\002\000\032\004\004\013\023" +
    "\015\105\016\104\020\035\021\013\022\106\023\033\024" +
    "\034\025\uffdf\032\103\033\027\001\002\000\026\004\004" +
    "\013\023\015\162\016\161\020\035\021\013\023\033\024" +
    "\034\032\032\033\060\001\002\000\004\007\166\001\002" +
    "\000\004\017\165\001\002\000\024\004\004\013\023\015" +
    "\057\020\035\021\013\023\033\024\034\032\152\033\060" +
    "\001\002\000\006\005\112\007\uffef\001\002\000\004\017" +
    "\164\001\002\000\044\002\uffda\004\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda\021\uffda\023" +
    "\uffda\024\uffda\026\uffda\027\uffda\030\uffda\032\uffda\033\uffda" +
    "\001\002\000\044\002\uffdb\004\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\020\uffdb\021\uffdb\023\uffdb" +
    "\024\uffdb\026\uffdb\027\uffdb\030\uffdb\032\uffdb\033\uffdb\001" +
    "\002\000\024\004\004\013\023\015\057\020\035\021\013" +
    "\023\033\024\034\032\055\033\060\001\002\000\004\017" +
    "\170\001\002\000\044\002\uffd9\004\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\023" +
    "\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\033\uffd9" +
    "\001\002\000\050\002\uffd0\004\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\032" +
    "\uffd0\033\uffd0\001\002\000\044\002\uffd8\004\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021" +
    "\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8\032\uffd8" +
    "\033\uffd8\001\002\000\024\004\004\013\175\015\057\020" +
    "\035\021\013\023\033\024\034\032\055\033\060\001\002" +
    "\000\004\017\202\001\002\000\026\004\004\013\023\015" +
    "\057\017\uffeb\020\035\021\013\023\033\024\034\032\055" +
    "\033\060\001\002\000\004\013\177\001\002\000\004\017" +
    "\200\001\002\000\004\022\201\001\002\000\044\002\uffe5" +
    "\004\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\020\uffe5\021\uffe5\023\uffe5\024\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\032\uffe5\033\uffe5\001\002\000\004\022\203\001" +
    "\002\000\044\002\uffe4\004\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4\023\uffe4\024" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\032\uffe4\033\uffe4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\046\002\036\003\024\004\005\005\010\006" +
    "\023\007\011\010\040\011\007\012\020\013\042\014\035" +
    "\015\015\016\037\017\013\020\030\021\041\022\021\023" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\002\153\003" +
    "\024\004\005\005\010\006\023\007\011\010\040\011\007" +
    "\012\020\013\042\014\035\015\015\016\037\017\013\020" +
    "\030\021\041\022\021\023\014\001\001\000\010\005\010" +
    "\011\060\023\117\001\001\000\004\005\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\050\012\051" +
    "\001\001\000\002\001\001\000\006\011\052\013\074\001" +
    "\001\000\006\011\052\013\053\001\001\000\002\001\001" +
    "\000\004\020\065\001\001\000\002\001\001\000\004\011" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\010\011\101\021\041\022\106" +
    "\023\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\010\023\117\001\001\000\004\005\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\110\001\001\000" +
    "\006\005\010\023\117\001\001\000\002\001\001\000\004" +
    "\005\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\110\001\001\000\002\001" +
    "\001\000\014\005\010\011\101\021\041\022\106\023\014" +
    "\001\001\000\012\011\052\013\157\017\162\021\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\173\001\001\000\002\001\001\000\004" +
    "\011\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;  //s recebe o Symbol da classe Symbol
    
    public static void main(String args[]) throws Exception{
        new parser(new Yylex(System.in)).parse();
    }
    
    public void syntax_error(Symbol s){
        report_error("Erro sintático na sentença. Linha: " + (s.right + 1) + " Coluna: " + s.left + ". Texto: \"" + s.value +
                      "\"", null);
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LOGIC ::= NUMERO OP_LOGICO NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGIC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // REPET ::= FOR ABRE_PARENTESE DVAR RELA INCREMENTO FECHA_PARENTESE ABRE_CHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPET",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // REPET ::= FOR ABRE_PARENTESE ATRIB RELA INCREMENTO FECHA_PARENTESE ABRE_CHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPET",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPR_FLOAT ::= ID OP FLOAT 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_FLOAT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPR_FLOAT ::= OP FLOAT 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_FLOAT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPR_FLOAT ::= FLOAT OP FLOAT 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_FLOAT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPR_FLOAT ::= ABRE_PARENTESE EXPR_FLOAT FECHA_PARENTESE 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_FLOAT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPR_INT ::= ID OP_ARITMETICO NUMERO 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_INT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPR_INT ::= NUMERO OP_ARITMETICO NUMERO 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_INT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPR_INT ::= ABRE_PARENTESE NUMERO OP_ARITMETICO NUMERO FECHA_PARENTESE 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_INT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPR ::= EXPR_FLOAT 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPR ::= EXPR_INT 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COND1 ::= ELSE ABRE_CHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COND ::= IF ABRE_PARENTESE EXPR_INT OP_RELACIONAL INFO FECHA_PARENTESE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COND ::= IF ABRE_PARENTESE LOGIC FECHA_PARENTESE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COND ::= IF ABRE_PARENTESE RELA FECHA_PARENTESE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RELA ::= INFO OP_RELACIONAL INFO PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RELA ::= INFO OP_RELACIONAL INFO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RELA ::= ABRE_PARENTESE INFO OP_RELACIONAL INFO FECHA_PARENTESE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INCREMENTO ::= ID OP_ATRIBUICAO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ATRIB ::= ID OP_ATRIBUICAO EXPR PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIB",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ATRIB ::= ID OP_ATRIBUICAO PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIB",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ATRIB ::= ID OP_ATRIBUICAO INFO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIB",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ATRIB ::= ID OP_ATRIBUICAO INFO PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIB",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OUT ::= SAIDA ABRE_PARENTESE INFO FECHA_PARENTESE PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OUT ::= SAIDA ABRE_PARENTESE SEPARADOR INFO SEPARADOR FECHA_PARENTESE PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OUT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IN ::= INCREMENTO ENTRADA ABRE_PARENTESE SEPARADOR INFO SEPARADOR FECHA_PARENTESE PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IN",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INOUT ::= OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INOUT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INOUT ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INOUT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INFO ::= ERROR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INFO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INFO ::= PALAVRARESERVADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INFO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INFO ::= SEPARADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INFO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INFO ::= ABRE_CHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INFO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INFO ::= LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INFO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INFO ::= ESPECIAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INFO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INFO ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INFO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INFO ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INFO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INFO ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INFO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DVAR ::= TIPO_VARIAVEL ID OP_ATRIBUICAO INFO PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DVAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DVAR ::= TIPO_VARIAVEL ID PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DVAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COD ::= LOGIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COD ::= REPET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COD ::= EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COD ::= COND1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COD ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COD ::= RELA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COD ::= INOUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COD ::= INFO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COD ::= ATRIB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COD ::= DVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= INICIO FIM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= COD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= COD START 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

